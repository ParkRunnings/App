name: Pull Request

on:
    pull_request:
        types: [opened, synchronize, reopened]

jobs:
                    
        setup:
            name: Setup
            runs-on: ubuntu-latest
            outputs:
                number: ${{ steps.number.outputs.number }}
                tag: ${{ steps.tag.outputs.tag }}
            steps:
            
              - name: Number
                id: number
                run: echo "${{ github.event.pull_request.head.ref }}" | perl -nle 'm/feature\/(\d+\.\d+\.\d+)/; print "number=",$1' >> "$GITHUB_OUTPUT"
                
              - name: Tag
                id: tag
                run: echo "tag=v"${{ steps.number.outputs.number }} >> "$GITHUB_OUTPUT"
        
        versioning:
            name: Versioning
            runs-on: ubuntu-latest
            needs: setup
            if: needs.setup.outputs.number != ''
            steps:
        
              - name: Checkout
                id: checkout
                uses: actions/checkout@v4
                with:
                    ref: ${{ github.event.pull_request.head.ref }}
            
              - name: Check Changelog
                id: changelog
                run: echo "count="$(cat CHANGELOG.md | grep -E -c "## ${{ needs.setup.outputs.tag }}") >> "$GITHUB_OUTPUT"
                
              - name: Changelog Test
                id: test
                if: ${{ steps.changelog.outputs.count != 1 }}
                run: echo "Found ${{ steps.changelog.outputs.count }} changelog lines for version ${{ needs.setup.outputs.number }} in CHANGELOG.md"; exit 1
       
              - name: Git Tag
                id: tag
                run: git tag ${{ needs.setup.outputs.tag }}; git push --force origin ${{ needs.setup.outputs.tag }}
                
              - name: Release Exists
                id: release
                run: echo "exists="$(gh release list | awk '{print $3}' | grep -c v1.3.0) >> "$GITHUB_OUTPUT"
                
              - run: gh release list | awk '{print $3}' | grep -c v1.3.0
              
              - run: echo ${{ steps.release.outputs.exists }}
                
              - name: Git Release
                id: publish
                run: |
                    gh release ${{ steps.release.outputs.exists == 0 && 'create' || 'edit' }} ${{ needs.setup.outputs.tag }} \
                        --draft \
                        --title "${{ needs.setup.outputs.tag }}" \
                        --notes "$(perl -0777 -ne 'print "$1\n" while /## v1.3.0(.*?)## v/gs' CHANGELOG.md | perl -pe 'chomp if eof')"
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    
            # name: Publish Release
            # on:
            #   push:
            #     tags:
            #       - 'v*'
            # jobs:
            #   build:
            #     runs-on: ubuntu-latest
            #     steps:
            #     - uses: actions/checkout@v3
            #     - name: Create a Release
            #       uses: elgohr/Github-Release-Action@v4
            #       env:
            #         GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
            #       with:
            #         title: MyReleaseMessage
